// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Data Transfer Service - Register Call")]
    public partial class DataTransferService_RegisterCallFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Data Transfer Service - Register Call.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Data Transfer Service - Register Call", "In order to make a profit on data calls\r\nAs an accountant\r\nI must be able to regi" +
                    "ster data calls by a set of parameters to calculate the bill for a customer", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register Local Data Transfer Call")]
        [NUnit.Framework.TestCaseAttribute("09:00:00", "1234", "www.google.com", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("15:41:02", "4321", "www.telenor.dk", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("18:29:56", "1029", "www.wikipedia.com", "DK", "DK", new string[0])]
        public virtual void RegisterLocalDataTransferCall(string startTime, string size, string url, string sourceCountry, string destinationCountry, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register Local Data Transfer Call", exampleTags);
#line 6
this.ScenarioSetup(scenarioInfo);
#line 7
 testRunner.Given("a subscription with phone number \"77889955\" exists");
#line 8
 testRunner.And("the subscription includes the Data Transfer Service");
#line 9
 testRunner.And(string.Format("the customer makes a data transfer at \"{0}\"", startTime));
#line 10
 testRunner.And(string.Format("the \"{0}\" kb of data is transfered", size));
#line 11
 testRunner.And(string.Format("the data transfer is from or to: \"{0}\"", url));
#line 12
 testRunner.And(string.Format("the data transfer is made from: \"{0}\"", sourceCountry));
#line 13
 testRunner.And(string.Format("the data transfer is made to: \"{0}\"", destinationCountry));
#line 14
 testRunner.When("the data transfer ends");
#line 15
 testRunner.Then("I must be able to find the data transfer using the subscription");
#line 16
 testRunner.And(string.Format("the start time of the data transfer must be registered at \"{0}\"", startTime));
#line 17
 testRunner.And(string.Format("the size of the data transfer must be registered to be: \"{0}\" kb", size));
#line 18
 testRunner.And(string.Format("the source of the data transfer must be registered as \"{0}\"", url));
#line 19
 testRunner.And(string.Format("the country from which the data transfer was made must be registered as \"{0}\"", sourceCountry));
#line 20
 testRunner.And(string.Format("the country for which the data transfer was made to must be registered as \"{0}\"", destinationCountry));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register Foreign Voice Call")]
        [NUnit.Framework.TestCaseAttribute("09:00:00", "1234", "www.google.com", "DK", "DE", new string[0])]
        [NUnit.Framework.TestCaseAttribute("15:41:02", "4321", "www.telenor.dk", "DE", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("18:29:56", "1029", "www.wikipedia.com", "DE", "DE", new string[0])]
        public virtual void RegisterForeignVoiceCall(string startTime, string size, string url, string sourceCountry, string destinationCountry, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register Foreign Voice Call", exampleTags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("a subscription with phone number \"77889955\" exists");
#line 31
 testRunner.And("the subscription includes the Data Transfer Service");
#line 32
 testRunner.And(string.Format("the subscription includes support for transfering data from country: \"{0}\"", sourceCountry));
#line 33
 testRunner.And(string.Format("the subscription includes support for transfering data to country: \"{0}\"", destinationCountry));
#line 34
 testRunner.And(string.Format("the customer makes a data transfer at \"{0}\"", startTime));
#line 35
 testRunner.And(string.Format("the \"{0}\" kb of data is transfered", size));
#line 36
 testRunner.And(string.Format("the data transfer is from or to: \"{0}\"", url));
#line 37
 testRunner.And(string.Format("the data transfer is made from: \"{0}\"", sourceCountry));
#line 38
 testRunner.And(string.Format("the data transfer is made to: \"{0}\"", destinationCountry));
#line 39
 testRunner.When("the data transfer ends");
#line 40
 testRunner.Then("I must be able to find the data transfer using the subscription");
#line 41
 testRunner.And(string.Format("the start time of the data transfer must be registered at \"{0}\"", startTime));
#line 42
 testRunner.And(string.Format("the size of the data transfer must be registered to be: \"{0}\" kb", size));
#line 43
 testRunner.And(string.Format("the source of the data transfer must be registered as \"{0}\"", url));
#line 44
 testRunner.And(string.Format("the country from which the data transfer was made must be registered as \"{0}\"", sourceCountry));
#line 45
 testRunner.And(string.Format("the country for which the data transfer was made to must be registered as \"{0}\"", destinationCountry));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
