// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Voice Call Service - Local Calls")]
    public partial class VoiceCallService_LocalCallsFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Voice Call Service - Local Calls.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Voice Call Service - Local Calls", "In order to make a profit on local voice calls\r\nAs an accountant\r\nI must be able " +
                    "to register voice calls \r\nand I must be able to choose between different kinds o" +
                    "f charges for voice calls", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Call Charge")]
        [NUnit.Framework.TestCaseAttribute("1.0", "0.29", "1.29", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "24.30", "25.30", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "1.45", "2.45", new string[0])]
        public virtual void CallCharge(string callCharge, string cost, string costWithCharge, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Call Charge", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("I have a registered a Voice Call");
#line 9
 testRunner.And("the supscription has \"DK\" as local country");
#line 10
 testRunner.And("the call is from \"DK\"");
#line 11
 testRunner.And("the call is made to \"DK\"");
#line 12
 testRunner.And(string.Format("I have specified a local call charge of {0}", callCharge));
#line 13
 testRunner.When(string.Format("I calculate the price of a call to be: {0}", cost));
#line 14
 testRunner.Then("an the initial call cost must be added to the calculated price");
#line 15
 testRunner.And(string.Format("the final cost must be: {0}", costWithCharge));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Second Charge")]
        [NUnit.Framework.TestCaseAttribute("1.0", "00:00:30", "30", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "00:00:30", "60", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0.5", "00:01:00", "30", new string[0])]
        public virtual void SecondCharge(string charge, string duration, string cost, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Second Charge", exampleTags);
#line 24
this.ScenarioSetup(scenarioInfo);
#line 25
 testRunner.Given("I have a subscription which has \"DK\" as local country");
#line 26
 testRunner.And("I have added a Voice Call service to the subscription");
#line 27
 testRunner.And(string.Format("I have specified a second charge of: \"{0}\" for the Voice Call service", charge));
#line 28
 testRunner.And("start a call from \"DK\"");
#line 29
 testRunner.And("the call is made to \"DK\"");
#line 30
 testRunner.And(string.Format("the call lasts: \"{0}\"", duration));
#line 31
 testRunner.When("the call is completed");
#line 32
 testRunner.And("the accounting machine has processed the call");
#line 33
 testRunner.Then(string.Format("the price must be: \"{0}\"", cost));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Minute Charge")]
        [NUnit.Framework.TestCaseAttribute("1.0", "00:00:30", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "00:00:30", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "00:01:00", "2", new string[0])]
        public virtual void MinuteCharge(string charge, string duration, string cost, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Minute Charge", exampleTags);
#line 42
this.ScenarioSetup(scenarioInfo);
#line 43
 testRunner.Given("I have a registered a Voice Call");
#line 44
 testRunner.And("the supscription has \"DK\" as local country");
#line 45
 testRunner.And("the call is from \"DK\"");
#line 46
 testRunner.And("the call is made to \"DK\"");
#line 47
 testRunner.And(string.Format("I have specified a minute charge of: {0}", charge));
#line 48
 testRunner.And(string.Format("the call lasted: {0}", duration));
#line 49
 testRunner.When("I calculate the price of a call");
#line 50
 testRunner.Then(string.Format("the price must be: {0}", cost));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Interval Charge")]
        [NUnit.Framework.TestCaseAttribute("00:00:30", "1.0", "00:00:29", "1", new string[0])]
        [NUnit.Framework.TestCaseAttribute("00:00:30", "1.0", "00:00:30", "2", new string[0])]
        [NUnit.Framework.TestCaseAttribute("00:00:45", "0.9", "00:00:45", "0.9", new string[0])]
        public virtual void IntervalCharge(string interval, string charge, string duration, string cost, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Interval Charge", exampleTags);
#line 59
this.ScenarioSetup(scenarioInfo);
#line 60
 testRunner.Given("I have a registered a Voice Call");
#line 61
 testRunner.And("the Voice Call is supscription has \"DK\" as local country");
#line 62
 testRunner.And("the call is from \"DK\"");
#line 63
 testRunner.And("the call is made to \"DK\"");
#line 64
 testRunner.And(string.Format("the Voice Call Service is set to charge {0} for every {1} begun", charge, interval));
#line 65
 testRunner.And(string.Format("the Voice Call lasted {0}", duration));
#line 66
 testRunner.When("I calculate the price of a call");
#line 67
 testRunner.Then(string.Format("the price must be: {0}", cost));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
