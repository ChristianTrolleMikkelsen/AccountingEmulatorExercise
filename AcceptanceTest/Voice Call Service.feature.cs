// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Voice Call Service")]
    public partial class VoiceCallServiceFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Voice Call Service.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Voice Call Service", "In order to make a profit on voice calls\r\nAs an accountant\r\nI must be able to reg" +
                    "ister voice calls \r\nand I must be able to choose between different kinds of char" +
                    "ges for voice calls", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Register Voice Call")]
        [NUnit.Framework.TestCaseAttribute("09:00:00", "01:37", "27206617", "DK", "DE", new string[0])]
        [NUnit.Framework.TestCaseAttribute("15:41:02", "02:15", "51948896", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("18:29:56", "28:09", "27206617", "DE", "US", new string[0])]
        public virtual void RegisterVoiceCall(string startTime, string duration, string receiver, string sourceCountry, string destinationCountry, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Register Voice Call", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 8
 testRunner.Given("a customer has a subscription linked to a mobile phone with the phone number \"778" +
                    "89955\"");
#line 9
 testRunner.And("the subscription includes the Voice Call Service");
#line 10
 testRunner.And(string.Format("the subscription has {0} as local country", sourceCountry));
#line 11
 testRunner.And(string.Format("the customer makes a Voice Call at {0}", startTime));
#line 12
 testRunner.And(string.Format("the call lasts {0}", duration));
#line 13
 testRunner.And(string.Format("the call is made to number: {0}", receiver));
#line 14
 testRunner.And(string.Format("the call is made from: {0}", sourceCountry));
#line 15
 testRunner.And(string.Format("the call is made to: {0}", destinationCountry));
#line 16
 testRunner.When("the call ends");
#line 17
 testRunner.Then("I must have registered the call by start time");
#line 18
 testRunner.And("duration");
#line 19
 testRunner.And("receiver");
#line 20
 testRunner.And("country from which the call was made");
#line 21
 testRunner.And("country for which the call was made");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
