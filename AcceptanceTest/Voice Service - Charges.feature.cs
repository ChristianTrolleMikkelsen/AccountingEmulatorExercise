// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.8.1.0
//      SpecFlow Generator Version:1.8.0.0
//      Runtime Version:4.0.30319.269
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace AcceptanceTest
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.8.1.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Voice Service - Charges")]
    public partial class VoiceService_ChargesFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Voice Service - Charges.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Voice Service - Charges", "In order to make a profit on voice calls (local and foreign)\r\nAs an accountant\r\nI" +
                    " must be able to register voice calls \r\nand I must be able to choose between dif" +
                    "ferent kinds of charges for voice calls", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Call Charge")]
        [NUnit.Framework.TestCaseAttribute("1.0", "0", "00:00:29", "1", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "0", "00:01:30", "2", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "0", "02:02:00", "1", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "4", "00:00:29", "4", "DE", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "3", "00:01:30", "3", "DK", "DE", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "2.3", "02:02:00", "2.3", "DE", "DE", new string[0])]
        public virtual void CallCharge(string callCharge, string foreignCallCharge, string duration, string cost, string sourceCountry, string destinationCountry, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Call Charge", exampleTags);
#line 7
this.ScenarioSetup(scenarioInfo);
#line 9
 testRunner.Given("I have a subscription which has \"DK\" as local country");
#line 10
 testRunner.And("I have added a Voice Call service to the subscription");
#line 11
 testRunner.And(string.Format("I have specified a call charge of \"{0}\"", callCharge));
#line 12
 testRunner.And(string.Format("I have added call charge of \"{0}\" for calling to or from country: \"DE\"", foreignCallCharge));
#line 13
 testRunner.And(string.Format("start a call from \"{0}\"", sourceCountry));
#line 14
 testRunner.And(string.Format("the call is made to \"{0}\"", destinationCountry));
#line 15
 testRunner.And(string.Format("the call lasts: \"{0}\"", duration));
#line 16
 testRunner.When("the call is completed");
#line 17
 testRunner.And("the accounting machine has processed the call");
#line 18
 testRunner.Then(string.Format("the price must be: \"{0}\"", cost));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Second Charge")]
        [NUnit.Framework.TestCaseAttribute("1.0", "0", "00:00:30", "30", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "0", "00:00:30", "60", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0.5", "0", "00:01:00", "30", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "3", "00:00:30", "90", "DK", "DE", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "4", "00:00:30", "120", "DE", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0.5", "5", "00:01:00", "300", "DE", "DE", new string[0])]
        public virtual void SecondCharge(string charge, string foreignCallCharge, string duration, string cost, string sourceCountry, string destinationCountry, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Second Charge", exampleTags);
#line 29
this.ScenarioSetup(scenarioInfo);
#line 30
 testRunner.Given("I have a subscription which has \"DK\" as local country");
#line 31
 testRunner.And("I have added a Voice Call service to the subscription");
#line 32
 testRunner.And(string.Format("I have specified a second charge of: \"{0}\" for the Voice Call service", charge));
#line 33
 testRunner.And(string.Format("I have added second charge of \"{0}\" for calling to or from country: \"DE\"", foreignCallCharge));
#line 34
 testRunner.And(string.Format("start a call from \"{0}\"", sourceCountry));
#line 35
 testRunner.And(string.Format("the call is made to \"{0}\"", destinationCountry));
#line 36
 testRunner.And(string.Format("the call lasts: \"{0}\"", duration));
#line 37
 testRunner.When("the call is completed");
#line 38
 testRunner.And("the accounting machine has processed the call");
#line 39
 testRunner.Then(string.Format("the price must be: \"{0}\"", cost));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Minute Charge")]
        [NUnit.Framework.TestCaseAttribute("1.0", "10", "00:00:30", "1", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "10", "00:00:30", "2", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "10", "00:01:01", "2", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("1.0", "3", "00:00:30", "3", "DK", "DE", new string[0])]
        [NUnit.Framework.TestCaseAttribute("2.0", "4", "00:00:30", "4", "DE", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("0.5", "5", "00:01:01", "10", "DE", "DE", new string[0])]
        public virtual void MinuteCharge(string charge, string foreignCallCharge, string duration, string cost, string sourceCountry, string destinationCountry, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Minute Charge", exampleTags);
#line 51
this.ScenarioSetup(scenarioInfo);
#line 52
 testRunner.Given("I have a subscription which has \"DK\" as local country");
#line 53
 testRunner.And("I have added a Voice Call service to the subscription");
#line 54
 testRunner.And(string.Format("I have specified a minute charge of: \"{0}\" for every minute begun for the Voice C" +
                        "all service", charge));
#line 55
 testRunner.And(string.Format("I have added minute charge of \"{0}\" for calling to or from country: \"DE\"", foreignCallCharge));
#line 56
 testRunner.And(string.Format("start a call from \"{0}\"", sourceCountry));
#line 57
 testRunner.And(string.Format("the call is made to \"{0}\"", destinationCountry));
#line 58
 testRunner.And(string.Format("the call lasts: \"{0}\"", duration));
#line 59
 testRunner.When("the call is completed");
#line 60
 testRunner.And("the accounting machine has processed the call");
#line 61
 testRunner.Then(string.Format("the price must be: \"{0}\"", cost));
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Interval Charge")]
        [NUnit.Framework.TestCaseAttribute("00:00:30", "1.0", "00:00:45", "10", "00:00:29", "1", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("00:00:30", "1.0", "00:00:45", "10", "00:00:31", "2", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("00:00:45", "0.9", "00:00:45", "10", "00:00:45", "0.9", "DK", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("00:00:30", "1.0", "00:00:30", "5", "00:00:29", "5", "DK", "DE", new string[0])]
        [NUnit.Framework.TestCaseAttribute("00:00:30", "1.0", "00:00:45", "10", "00:00:31", "10", "DE", "DK", new string[0])]
        [NUnit.Framework.TestCaseAttribute("00:00:45", "0.9", "00:00:55", "15", "00:01:55", "45", "DE", "DE", new string[0])]
        public virtual void IntervalCharge(string interval, string charge, string foreignInterval, string foreignCallCharge, string duration, string cost, string sourceCountry, string destinationCountry, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Interval Charge", exampleTags);
#line 73
this.ScenarioSetup(scenarioInfo);
#line 74
 testRunner.Given("I have a subscription which has \"DK\" as local country");
#line 75
 testRunner.And("I have added a Voice Call service to the subscription");
#line 76
 testRunner.And(string.Format("I have specified a interval charge of: \"{0}\" for every \"{1}\" begun for the Voice " +
                        "Call service", charge, interval));
#line 77
 testRunner.And(string.Format("I have added an interval charge of \"{0}\" for every \"{1}\" for calling to or from c" +
                        "ountry: \"DE\"", foreignCallCharge, foreignInterval));
#line 78
 testRunner.And(string.Format("start a call from \"{0}\"", sourceCountry));
#line 79
 testRunner.And(string.Format("the call is made to \"{0}\"", destinationCountry));
#line 80
 testRunner.And(string.Format("the call lasts: \"{0}\"", duration));
#line 81
 testRunner.When("the call is completed");
#line 82
 testRunner.And("the accounting machine has processed the call");
#line 83
 testRunner.Then(string.Format("the price must be: \"{0}\"", cost));
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
